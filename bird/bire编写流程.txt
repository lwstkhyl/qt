实现在屏幕上飞行一只鸟，鸟会自动从左向右飞，如果飞出屏幕会再次从屏幕的另一边飞回来，用鼠标可以拖拽这只鸟，右键它会弹出“退出选项”
新建项目bird,基类为qwidget,导入资源
1、设置图标，在main_scene.cpp中main_scene::main_scene(QWidget *parent)下添加
    this->setWindowIcon(QIcon(":/bird/birdIcon.ico"));

2、鸟类的创建：新建c++class，名为bird，选择基类qwidget,注意要确保底下勾选include qwidget和add q_object。选择基类qwidget，就可以把鸟看成另外一个窗口，可以设置parent、size等
bird.h中public下添加：
    QPixmap m_bird_pix;//鸟显示的图片资源
    int min=1,max=8;//图片最小值和最大值下标

bird.cpp:
bird::bird()
{
    for(int i=0;i<this->max;i++)
    {
        QString str=QString(":/bird%1.png").arg(i+1);
        this->m_bird_pix.load(str);
    }//提前加载图片，防止后面因为png格式转换多次报警告
    this->setFixedSize(this->m_bird_pix.width(),this->m_bird_pix.height());//设置鸟的尺寸
    //默认情况下鸟的尺寸和屏幕一样大，会导致拖拽时出现误差
}

先在main_scene.h中public下添加:
    bird *m_bird;//创建鸟对象的指针
    void paintEvent(QPaintEvent *event);//重写绘图事件

main_scene.cpp中main_scene::main_scene(QWidget *parent)下添加:
    this->m_bird=new bird;//创建鸟对象
    this->m_bird->setParent(this);//将鸟对象显示到窗口中
    this->setFixedSize(this->m_bird->width(),this->m_bird->height());//设置主窗口大小（不必要，因为后面还要进行隐藏）
void main_scene::paintEvent(QPaintEvent *event)
{
    QPainter painter(this);
    painter.drawPixmap(0,0,this->m_bird->m_bird_pix);
}

3、鸟的动画--与上个案例不同，这里的定时器在类中添加，而不是在main_scene中添加，因此需要额外的更新图片信号（从bird类连接到主场景）、启动定时器函数
bird.h中public下添加：
    QTimer *timer;//定时器
    void running();//执行动画（启动定时器函数）
signals:
    void change_pix();//正在切换图片的信号

bird.cpp中构造函数内添加：
    this->timer=new QTimer(this);//创建定时器对象
    connect(timer,&QTimer::timeout,[=](){
        QString str=QString(":/bird%1.png").arg(this->min++);//从bird1.png开始
        this->m_bird_pix.load(str);
        if(this->min>this->max)
            this->min=1;//如果加到了最大值就要进行重置
        emit change_pix();//发出切换了图片的信号，让主场景知道图片发生了改变从而进行更新
    });
void bird::running()
{
    this->timer->start(50);//启动定时器，每隔50ms切张图
}

main_scene.cpp中main_scene::main_scene(QWidget *parent)下添加:
    this->m_bird->running();//启动定时器
    connect(this->m_bird,&bird::change_pix,[=](){
        update();//调用画图事件来进行更新
    });

4、鼠标拖拽：当对鸟按下鼠标时移动鼠标，鸟会跟着鼠标移动
确定3个位置：鼠标点击位置A，屏幕左上角（原点）O，main_scene窗口左上角（qt中位置为0，0）B，根据向量OA和OB可以知道AB向量的值，这个值在拖拽前后不发生改变，因此得到AB向量后，我们可以通过鼠标移动后新的OA来确定新的OB（窗口的位置），进而画出新窗口实现窗口内鸟的移动
在程序中设上面的OA为m_oaPos，OB为m_obPos，AB为m_Pos
bird.h中public下添加：
    QPoint m_Pos;//AB
    void mouseMoveEvent(QMouseEvent *event);//重写鼠标移动事件
    void mousePressEvent(QMouseEvent *event);//重写鼠标按下事件
siganls下添加:
    void moving(QPoint point);//移动窗口的信号

bird.cpp中添加:
void bird::mousePressEvent(QMouseEvent *event)
{
    this->m_oaPos=event->globalPos();
    this->m_obPos=((QWidget*)this->parent())->frameGeometry().topLeft();//this->parent()指bird所在的窗口，调用返回值不确定，需要强制转换成QWidget*类型
    //frameGeometry().topLeft()是窗口左上角的点
    this->m_Pos=this->m_oaPos-this->m_obPos;
}
void bird::mouseMoveEvent(QMouseEvent *event)
{
    this->m_oaPos=event->globalPos();//改变向量OA的值,注意QMouseEvent和QMouseEvent中globalPos不同
    this->m_obPos=this->m_oaPos-this->m_Pos;//改变向量OB的值
    //在移动过程中得到窗口最终移动到的位置OB，用信号发送给窗口
    emit this->moving(this->m_obPos);
}


main_scene.cpp中main_scene::main_scene(QWidget *parent)下添加:
    connect(this->m_bird,&bird::moving,[=](QPoint point){
        this->move(point);
    });//lambda表达式中(QPoint point)用于接收moving信号中的qpoint

5、自动移动
main_scene.h中public下添加:
    QTimer *timer;//自动移动的定时器
    QPoint m_auto_pos;//记录自动移动的位置，默认为左上角的点

main_scene.cpp中connect(this->m_bird,&bird::moving,[=](QPoint point)中添加:
        m_auto_pos=point;//鼠标拖拽时更新当前窗口的位置
        //如果不加，拖拽鸟后，窗口会瞬移到拖拽之前的位置继续移动

main_scene.cpp中main_scene::main_scene(QWidget *parent)下添加:
    this->timer=new QTimer(this);//创建定时器对象
    this->timer->start(30);//启动定时器，间隔为30ms
    QDesktopWidget* desk=QApplication::desktop();//获取屏幕的相关信息
    this->m_auto_pos.setY(desk->height()/2-this->m_bird->height());//设置起始y坐标
    connect(timer,&QTimer::timeout,[=](){
        this->m_auto_pos.setX(this->m_auto_pos.x()+5);
        if(this->m_auto_pos.x()>desk->width())//如果x坐标超出了屏幕宽度
        {
            this->m_auto_pos.setX(-this->m_bird->width());//将窗口位置设为屏幕左侧
        }//将坐标向右移动5单位
        this->move(this->m_auto_pos);//窗口也要移动
    });

6、实现当鼠标按下鸟时会停止移动，当释放时才会继续移动
bird.h中public下添加：
    bool mouse_press=false;//鼠标按下状态，默认没按
    void mouseReleaseEvent(QMouseEvent *event);//重写鼠标释放事件

bird.cpp中void bird::mousePressEvent(QMouseEvent *event)下添加:
    this->mouse_press=true;//鼠标按下时状态为true

bird.cpp中添加:
void bird::mouseReleaseEvent(QMouseEvent *event)
{
    this->mouse_press=false;//鼠标释放时状态为false
}

main_scene.cpp中connect(timer,&QTimer::timeout,[=]()下所有语句前添加限制条件
        if(this->m_bird->mouse_press==false)//当鼠标没有按下时

7、右键退出菜单
bird.h中public下添加：
    QMenu * m_menu;//创建菜单指针

bird.cpp中构造函数下添加:
    this->m_menu=new QMenu();//创建菜单对象
    connect(this->m_menu->addAction("退出"),&QAction::triggered,[=](){
        //this->m_menu->addAction("退出")会创建一个“退出”的选项，同时返回该选项，将创建和使用该选项和为一体
        exit(0);//关闭窗口并退出程序
    });//注意这里只创建没有显示

bird.cpp中void bird::mousePressEvent(QMouseEvent *event)下添加:
    if(event->button()==Qt::RightButton)//判断按下的是不是右键
    {
        this->m_menu->popup(QCursor::pos());//弹出菜单，参数为弹出的位置，QCursor::pos()表示当前鼠标的位置
    }
    //如果菜单消失（不是点击退出），鸟应该继续向前飞
    connect(this->m_menu,&QMenu::aboutToHide,[=](){//&QMenu::aboutToHide是菜单消失的信号
        this->mouse_press=false;//将鼠标设为松开的状态
    });
注意右键按下后松开鼠标，程序不会执行void bird::mouseReleaseEvent鼠标释放事件（鼠标按下和释放事件无特殊说明都是说的左键），所以会保持不动，this->mouse_press也一直是true，所以才能利用更改bool值的方式实现继续移动

8、窗口透明化：
main_scene.cpp中main_scene::main_scene(QWidget *parent)下添加:
    this->setWindowFlags(Qt::FramelessWindowHint);//去掉标题栏
    this->setAttribute(Qt::WA_TranslucentBackground);//设置透明窗体
    this->setWindowFlags(this->windowFlags()|Qt::WindowStaysOnTopHint);//设置窗口顶层（不会被其它界面遮挡）
