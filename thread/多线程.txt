主线程/ui线程/窗口线程：默认的线程，负责窗口事件处理或者窗口控件数据的更新
子线程：负责后台的业务逻辑处理，不能对窗口对象做任何操作（这是由主线程负责的）
主线程和子线程之间通过信号槽进行数据的处理
qthread线程类：
bool isfinished()-判断线程中的任务是否处理完毕
bool isrunning()-判断子线程是不是在执行任务
线程可以设置优先级，可以通过priority函数得到优先级，setpriority设置优先级
优先级是8个枚举类型，最低的是idlepriority，最高的是inheritpriority
void exit()-退出线程
bool wait()-等待任务完成后退出线程，一般在exit函数后面调用
finished信号-任务执行完毕
started信号-开始工作之前发出（一般不用）
quit槽函数-和调用exit()函数效果相同
start槽函数-启动子线程
terminate槽函数-线程立刻退出（一般不用）
qthread* currentthread()-返回一个指向管理当前执行线程的指针
int idealthreadcount()-返回可以在系统上运行的理想线程数=电脑CPU核心数
void usleep(unsigned long us)-线程休眠函数，单位为微秒
void msleep(unsigned long ms)-线程休眠函数，单位为ms
void sleep(unsigned long s)-线程休眠函数，单位为s
void run()-是一个protected virtual，如果想让创建的子线程执行某个任务，需要写一个子类继承qthread，并在子类中重写父类的run()函数，函数体为对应的任务处理流程，该函数不能在类外调用，若想让线程执行该函数中的流程，需通过当前线程对象调用槽函数start()启动子线程，从而执行该流程
使用多线程：创建一个新c++class，让它继承qthread类，之后重写父类的run()方法，在该函数内写子线程要处理的具体的业务流程，之后在主线程（主函数）中创建（new）一个子线程对象，并启动它就可以了

qrunnable类：
void run()-是一个纯虚函数，在子类中必须进行重写，里面是任务的处理流程
void setautodelete(bool )-设置析构方式，true是自动析构，false需要手动析构
bool autodelete() const-获取当前任务对象的析构方式，返回值与析构方式同上（一般不需要使用）

qthreadpool线程池类：
static qthreadpool *qthreadpool::globalinstance()-在每个qt程序中都有一个全局的线程池对象，通过这个函数可以直接访问到它
void qthreadpool::start(qrunnable * runnable,int priority=0)-将任务runnable放入线程池，优先级默认为0
void setmaxthreadcount(int )-设置线程池中线程的最大个数

现要在线程1里面生成一组随机数，在线程2和3中用两种不同方法对其进行排序，并统计排序的时间，主线程要显示生成的随机数、两种排序的结果
1、创建新项目，基类为qmainwindow，在ui界面中先拖一个大的widget，再在里面放一个groupbox，在groupbox里面放一个listwidget，将修改后的groupbox复制成3份，标题分别为“随机数”、”冒泡排序结果“、”快速排序结果“，分别修改其中的listwidget变量名为”rand_list“、”bubble_list“、”quick_list“,在主widget下放一个pushbutton，变量名为start

2、之后创建新c++class，名为my_thread，基类为qobject，因为qthread的父类为qobject，在其.h中把public QObject改成public QThread并添加对应头文件,.cpp中构造函数也改成my_thread::my_thread(QObject *parent) : QThread(parent)

3、生成随机数：
my_thread.h:
public:
    explicit my_thread(QObject *parent = nullptr);//不变
    int m_num;//主线程发送过来的随机数生成个数
    void recv_num(int num);//槽函数，接收主线程发送过来的num
protected:
    void run() override;//重写run方法，注意其中不能传入参数
signals:
    void send_array(QVector<int> num);//把生成的随机数发送给主线程

my_thread.cpp:
void my_thread::recv_num(int num)
{
    m_num=num;
}
void my_thread::run()
{
    qDebug()<<"生成随机数线程的线程地址："<<QThread::currentThread();
    QVector<int> list;//将生成的随机数存入该vector中
    QElapsedTimer time;//计算该流程使用的时间
    time.start();//开始计时
    for(int i=0;i<m_num;i++)
    {
        list.push_back(qrand()%100000);//生成从0-100000的随机数
    }
    int milsec=time.elapsed();//返回执行该流程返回的时间，单位为ms
    qDebug()<<"生成"<<m_num<<"个随机数所需时间："<<milsec<<"ms";
    emit send_array(list);
}

mainwindow.h类中添加
signals:
    void starting(int num);//启动主线程，发送num参数

mainwindow.cppMainWindow::MainWindow(QWidget *parent)下添加
    my_thread * generate=new my_thread;//创建子线程对象
    connect(this,&MainWindow::starting,generate,&my_thread::recv_num);//starting信号和recv_num信号槽接收同类型的参数，将staring信号的参数直接传给槽函数执行其函数体
    connect(ui->start,&QPushButton::clicked,this,[=](){
        emit starting(10000);//主线程传给子线程m_num参数
        generate->start();//按钮被按下时启动子线程
    });
    connect(generate,&my_thread::send_array,this,[=](QVector<int> list){
        for(int i=0;i<list.size();i++)
        {
            ui->rand_list->addItem(QString::number(list[i]));//把传过来的list中的数转成qstring类型显示到listwidget中
        }
    });

main.cpp中w.show();前添加
    qRegisterMetaType<QVector<int>>("QVector<int>");//当报错(Make sure 'QVector<int>' is registered using qRegisterMetaType().)时添加

执行后可以看到输出的地址以及生成随机数所需时间

4、冒泡排序
创建新c++class，名为bubble_sort，用上面方法把继承qobject改成继承qthread
bubble_sort.h的类中:
public:
    explicit bubble_sort(QObject *parent = nullptr);
    void recv_array(QVector<int> list);//接收生成的随机数列表
    QVector<int> m_list;//要进行排序的随机数
protected:
    void run() override;//重写run方法
signals:
    void finish(QVector<int> num);//排序结束的信号，传给主线程排序后结果列表

bubble_sort.cpp:
void bubble_sort::recv_array(QVector<int> list)
{
    m_list=list;
}
void bubble_sort::run()
{
    qDebug()<<"冒泡排序线程的线程地址："<<QThread::currentThread();
    QElapsedTimer time;
    time.start();
    int temp;
    for(int i=0;i<m_list.size();i++)
        for(int j=0;j<m_list.size()-i-1;j++)
            if(m_list[j]>m_list[j+1])
            {
                temp=m_list[j];
                m_list[j]=m_list[j+1];
                m_list[j+1]=temp;
            }
    int milsec=time.elapsed();
    qDebug()<<"冒泡排序用时"<<milsec<<"ms";
    emit finish(m_list);
}

5、快速排序：参考冒泡排序
创建创建新c++class，名为quick_sort，用上面方法把继承qobject改成继承qthread
quick_sort.h类中：
public:
    explicit quick_sort(QObject *parent = nullptr);
    void recv_array(QVector<int> list);
    QVector<int> m_list;
    void quick_sort_func(QVector<int> &list,int l,int r);//快速排序函数,l和r为起始和结束位置
protected:
    void run() override;
signals:
    void finish(QVector<int> num);

quick_sort.cpp:
void quick_sort::recv_array(QVector<int> list)
{
    m_list=list;
}
void quick_sort::quick_sort_func(QVector<int> &s, int l, int r)
{
    if(l<r)
    {
        int i=l,j=r;
        int x=s[j];
        while (i<j)
        {
            while (i<j&&s[j]>=x)
            {
                j--;
            }
            if(i<j)
            {
                s[i++]=s[j];
            }
            while (i<j&&s[i]<x)
            {
                i++;
            }
            if(i<j)
            {
                s[j--]=s[i];
            }
        }
        s[i]=x;
        quick_sort_func(s,l,i-1);
        quick_sort_func(s,i+1,r);
    }
}
void quick_sort::run()
{
    qDebug()<<"快速排序线程的线程地址："<<QThread::currentThread();
    QElapsedTimer time;
    time.start();
    quick_sort_func(list,0,list.size()-1);
    int milsec=time.elapsed();
    qDebug()<<"快速排序用时"<<milsec<<"ms";
    emit finish(m_list);
}

6-1、主线程调用两个子线程--方式1（主线程接收并执行子线程）
mainwindow.cpp的MainWindow::MainWindow(QWidget *parent)下connect函数前添加:
    bubble_sort * bubble=new bubble_sort;//创建冒泡排序进程对象
    quick_sort * quick=new quick_sort;//创建快速排序进程对象
    connect(bubble,&bubble_sort::finish,this,[=](QVector<int> list){
        for(int i=0;i<list.size();i++)
        {
            ui->bubble_list->addItem(QString::number(list[i]));
        }
    });
    connect(quick,&quick_sort::finish,this,[=](QVector<int> list){
        for(int i=0;i<list.size();i++)
        {
            ui->quick_list->addItem(QString::number(list[i]));
        }
    });//排序结束后将两个排序结果输出到listwidget中
connect(generate,&my_thread::send_array,this,[=](QVector<int> list)下添加:
        bubble->start();
        quick->start();//当随机数生成完后启动两个排序线程

6-2、主线程调用两个子线程--方式2（任务类）
创建新c++class，名为my_work，基类为qobject，因为qt中一个类使用信号槽就必须继承qobject
my_work.h中原有类删掉，改为:
class generate_new : public QObject //生成随机数类
{
    Q_OBJECT
public:
    explicit generate_new(QObject *parent = nullptr);
    void working(int num);//相当于run()方法中传入参数，因此就不需要recv_num函数以及类中的变量m_num进行接收，下面两个类同理
signals:
    void send_array(QVector<int> num);
};
class bubble_sort_new : public QObject//冒泡排序类
{
    Q_OBJECT
public:
    explicit bubble_sort_new(QObject *parent = nullptr);
    void working(QVector<int> list);
signals:
    void finish(QVector<int> num);
};
class quick_sort_new : public QObject//快速排序类
{
    Q_OBJECT
public:
    explicit quick_sort_new(QObject *parent = nullptr);
    void quick_sort_func(QVector<int> &list,int l,int r);
    void working(QVector<int> list);
signals:
    void finish(QVector<int> num);
};
注意其实前面的方法这三个线程类也可以写在同一个c++class中

my_work.cpp中把原构造函数删掉，换成:（其实就是把前面方法的m_list和m_num换成list和num，然后把传入num的函数删掉）
generate_new::generate_new(QObject *parent):QObject(parent)
{
}
void generate_new::working(int num)
{
    qDebug()<<"生成随机数线程的线程地址："<<QThread::currentThread();
    QVector<int> list;
    QElapsedTimer time;
    time.start();
    for(int i=0;i<num;i++)
    {
        list.push_back(qrand()%100000);
    }
    int milsec=time.elapsed();
    qDebug()<<"生成"<<num<<"个随机数所需时间："<<milsec<<"ms";
    emit send_array(list);
}
bubble_sort_new::bubble_sort_new(QObject *parent):QObject(parent)
{
}
void bubble_sort_new::working(QVector<int> list)
{
    qDebug()<<"冒泡排序线程的线程地址："<<QThread::currentThread();
    QElapsedTimer time;
    time.start();
    for(int i=0;i<list.size();i++)
        for(int j=0;j<list.size()-i-1;j++)
            if(list[j]>list[j+1])
            {
                int temp=list[j];
                list[j]=list[j+1];
                list[j+1]=temp;
            }
    int milsec=time.elapsed();
    qDebug()<<"冒泡排序用时"<<milsec<<"ms";
    emit finish(list);
}
quick_sort_new::quick_sort_new(QObject *parent):QObject(parent)
{
}
void quick_sort_new::quick_sort_func(QVector<int> &s, int l, int r)
{
    if(l<r)
    {
        int i=l,j=r;
        int x=s[l];
        while (i<j)
        {
            while (i<j&&s[j]>=x)
                j--;
            if(i<j)
            {
                s[i]=s[j];
                i++;
            }
            while (i<j&&s[i]<x)
                i++;
            if(i<j)
            {
                s[j]=s[i];
                j--;
            }
        }
        s[i]=x;
        quick_sort_func(s,l,i-1);
        quick_sort_func(s,i+1,r);
    }
}
void quick_sort_new::working(QVector<int> list)
{
    qDebug()<<"快速排序线程的线程地址："<<QThread::currentThread();
    QElapsedTimer time;
    time.start();
    quick_sort_func(list,0,list.size()-1);
    int milsec=time.elapsed();
    qDebug()<<"快速排序用时"<<milsec<<"ms";
    emit finish(list);
}

mainwindow.cpp的MainWindow::MainWindow(QWidget *parent)下添加:（代替之前ui->setupUi(this);之后的所有代码）
    QThread *t1=new QThread;
    QThread *t2=new QThread;
    QThread *t3=new QThread;//创建子线程对象
    generate_new *gen=new generate_new;
    bubble_sort_new *bubble=new bubble_sort_new;
    quick_sort_new *quick=new quick_sort_new;//创建任务类对象
    gen->moveToThread(t1);
    bubble->moveToThread(t2);
    quick->moveToThread(t3);//将任务对象移动到某个子线程中
    connect(this,&MainWindow::starting,gen,&generate_new::working);//starting和working接收相同参数，进行传参
    connect(ui->start,&QPushButton::clicked,this,[=](){
        emit starting(10000);
        t1->start();//t1是随机数线程，用t1代替generate进行启动
    });//以下都与前面方法相同，只需把recv_num改成working，bubble和quick的start用t2t3代替
    connect(gen,&generate_new::send_array,bubble,&bubble_sort_new::working);
    connect(gen,&generate_new::send_array,quick,&quick_sort_new::working);//注意这两个connect函数不能合并成一个（将第三个参数改成this，之后调用lambda表达式启动两个working），因为这样就会在this里执行，而不是在bubble和quick子线程里执行
    connect(gen,&generate_new::send_array,this,[=](QVector<int> list){
        t2->start();
        t3->start();
        for(int i=0;i<list.size();i++)
        {
            ui->rand_list->addItem(QString::number(list[i]));
        }
    });
    connect(bubble,&bubble_sort_new::finish,this,[=](QVector<int> list){
        for(int i=0;i<list.size();i++)
        {
            ui->bubble_list->addItem(QString::number(list[i]));
        }
    });
    connect(quick,&quick_sort_new::finish,this,[=](QVector<int> list){
        for(int i=0;i<list.size();i++)
        {
            ui->quick_list->addItem(QString::number(list[i]));
        }
    });

第二种方法注意：有多少个任务对象就创建多少个子线程；任务类要继承qobject类，且创建（new）时不能指定父对象；任务类中可以有多个工作函数，因为执行时仍需指定是任务类中的哪个工作函数（connect中的槽函数）；一个子线程可以包含多个任务类，启动子线程时按顺序执行这些任务类

第一种方法的缺点是一个线程类只能有一个run函数，当处理流程复杂时需要加上很多判断条件，易出错且可读性差。

7、线程资源释放
第一种方法是在创建子线程对象是指定父对象this，即QThread *t1=new QThread(this);
第二种方法：在MainWindow::MainWindow(QWidget *parent)的最后添加
    connect(this,&MainWindow::destroyed,this,[=](){
        t1->quit();
        t1->wait();
        t1->deleteLater();
        gen->deleteLater();//t2 t3和bubble quick都按相同操作释放
    });
若是用线程类创建的多线程，就是
    connect(this,&MainWindow::destroyed,this,[=](){
        generate->quit();
        generate->wait();
        generate->deleteLater()://bubble quick都按相同操作释放
    });

8、用线程池重写上面的程序：
在qt文件夹内将之前的thread文件夹复制，粘贴，修改文件夹名为thread_pool，并把里面.pro文件名也改为thread_pool，删除.user文件，双击.pro文件，打开，以下操作都是对之前第一种方法（线程类）的修改

将三个线程类的继承由qthread改成qobject和qrunnable，即class quick_sort : public QObject,public QRunnable，
将三个线程类.h文件中的run()改为public（因为qrunnable类中的run就是public）
将三个线程类.cpp的构造函数声明初始化改为QObject(parent),QRunnable()
构造函数内添加    setAutoDelete(true);
最后完整的一个类：
bubble_sort.h:
class bubble_sort : public QObject,public QRunnable
{
    Q_OBJECT
public:
    explicit bubble_sort(QObject *parent = nullptr);
    void recv_array(QVector<int> list);
    QVector<int> m_list;
    void run() override;
signals:
    void finish(QVector<int> num);
};
bubble_sort.cpp:
#include <QThread>
bubble_sort::bubble_sort(QObject *parent) : QObject(parent),QRunnable()
{
    setAutoDelete(true);
}
//另两个函数不变

mainwindow.cpp的MainWindow::MainWindow(QWidget *parent)下:
    my_thread * generate=new my_thread;
    bubble_sort * bubble=new bubble_sort;
    quick_sort * quick=new quick_sort;//创建任务类qrunnable对象
    connect(this,&MainWindow::starting,generate,&my_thread::recv_num);
    connect(ui->start,&QPushButton::clicked,this,[=](){
        emit starting(10000);
        QThreadPool::globalInstance()->start(generate);//把qrunnable类对象-生成随机数放入线程池内
    });
    connect(generate,&my_thread::send_array,bubble,&bubble_sort::recv_array);
    connect(generate,&my_thread::send_array,quick,&quick_sort::recv_array);
    connect(generate,&my_thread::send_array,this,[=](QVector<int> list){
        QThreadPool::globalInstance()->start(bubble);
        QThreadPool::globalInstance()->start(quick);//把qrunnable类对象-排序放入线程池内
        for(int i=0;i<list.size();i++)
        {
            ui->rand_list->addItem(QString::number(list[i]));//把传过来的list中的数转成qstring类型显示到listwidget中
        }
    });
    connect(bubble,&bubble_sort::finish,this,[=](QVector<int> list){
        for(int i=0;i<list.size();i++)
        {
            ui->bubble_list->addItem(QString::number(list[i]));
        }
    });
    connect(quick,&quick_sort::finish,this,[=](QVector<int> list){
        for(int i=0;i<list.size();i++)
        {
            ui->quick_list->addItem(QString::number(list[i]));
        }
    });

此时看输出结果会发现生成随机数线程的线程地址与冒泡排序的相同，而与快速排序的不同，这是因为在线程池内，生成随机数的线程执行完后又接着执行了冒泡排序的线程，而由于冒泡和快排的线程同时启动，又在线程池内多开了一个线程执行快排。所以线程池减少了线程的占用

