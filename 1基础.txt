.pro:
QT       += core gui#qt包含的模块
greaterThan(QT_MAJOR_VERSION, 4): QT += widgets
#大于4版本以上，包含widget模块
CONFIG += c++11
#target：目标，生成的.exe程序的名称
DEFINES += QT_DEPRECATED_WARNINGS
#template：模板，应用程序模板
deprecated before Qt 6.0.0
SOURCES += \#源文件
    main.cpp \
    mywidget.cpp
HEADERS += \#头文件
    mywidget.h
# Default rules for deployment.
qnx: target.path = /tmp/$${TARGET}/bin
else: unix:!android: target.path = /opt/$${TARGET}/bin
!isEmpty(target.path): INSTALLS += target



mywidget.h:
#ifndef MYWIDGET_H
#define MYWIDGET_H      //防止重复加载头文件
#include <QWidget>
class mywidget : public QWidget
{
    Q_OBJECT//Q_OBJECT宏，允许类中使用信号和槽的机制

public:
    mywidget(QWidget *parent = nullptr);//构造函数
    ~mywidget();//析构函数
};
#endif // MYWIDGET_H



main.cpp:
#include "mywidget.h"
#include <QApplication>
//argc是命令行变量数量，argv是命令行变量的数组
int main(int argc, char *argv[])
{
    //a是应用程序对象，有且只有一个
    QApplication a(argc, argv);
    //w是窗口对象
    mywidget w;
    //窗口对象默认不显示，必须调用show方法
    w.show();
    //让应用程序对象进入消息循环（弹出来的窗口不消失，只有点×才退出）
    return a.exec();
}




mywidget.cpp:
#include "mywidget.h"
mywidget::mywidget(QWidget *parent)
    : QWidget(parent)
{
}
mywidget::~mywidget()
{
}
//命名规范：类名首字母大写，单词和单词之间首字母大写
//函数名、变量名称、首字母小写、单词和单词之间首字母大写
//注释选中部分：CTRL+/，运行：CTRL+r，编译：CTRL+b,字体缩放：CTRL+鼠标滚轮
//查找选中单词：CTRL+f,整行移动：CTRL+shift+↑或↓，帮助文档：f1/左侧按钮/D:\qt\5.14.2\mingw73_32\bin\assitant
//自动对齐：CTRL+i,同名之间的.h和.cpp切换：f4(从.cpp跳到.h界面）

